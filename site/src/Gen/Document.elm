-- | This file was auto generated by typed-wire. Do not modify by hand
module Document exposing (..)



import List as L
import Json.Decode as JD
import Json.Decode exposing ((:=))
import Json.Encode as JE

type alias Document  =
   { id : Int
   , title : String
   , content : String
   , tags : (List String)
   }

jencDocument : Document  -> JE.Value
jencDocument = JE.object << jencTuplesDocument
jencTuplesDocument : Document  -> List (String, JE.Value)
jencTuplesDocument  x =
    [ ("id", JE.int x.id)
    , ("title", JE.string x.title)
    , ("content", JE.string x.content)
    , ("tags", (JE.list << L.map (JE.string)) x.tags)
    ]
jdecDocument : JD.Decoder (Document )
jdecDocument =
    ("id" := JD.int) `JD.andThen` \j_id -> 
    ("title" := JD.string) `JD.andThen` \j_title -> 
    ("content" := JD.string) `JD.andThen` \j_content -> 
    ("tags" := JD.list (JD.string)) `JD.andThen` \j_tags -> 
    JD.succeed (Document j_id j_title j_content j_tags)

